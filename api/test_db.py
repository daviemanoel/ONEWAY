#!/usr/bin/env python
"""
Script de teste para verificar conex√£o do Django com PostgreSQL
√ötil para debug de problemas de deploy no Railway
"""
import os
import sys
import django
from django.db import connection
from django.core.management import execute_from_command_line

# Adiciona o diret√≥rio do projeto ao path
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

# Configura as settings do Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'oneway_admin.settings')

print("=" * 50)
print("TESTE DE CONEX√ÉO DJANGO + POSTGRESQL")
print("=" * 50)

try:
    # Inicializa o Django
    print("\n1. Inicializando Django...")
    django.setup()
    print("‚úÖ Django inicializado com sucesso")
    
    # Testa conex√£o com o banco
    print("\n2. Testando conex√£o com o banco de dados...")
    with connection.cursor() as cursor:
        cursor.execute("SELECT 1")
        result = cursor.fetchone()
        print(f"‚úÖ Conex√£o estabelecida! Resultado: {result}")
        
        # Informa√ß√µes sobre a conex√£o
        cursor.execute("SELECT current_database(), current_user, version()")
        db_info = cursor.fetchone()
        print(f"\nüìä Informa√ß√µes do Banco:")
        print(f"   - Database: {db_info[0]}")
        print(f"   - Usu√°rio: {db_info[1]}")
        print(f"   - Vers√£o PostgreSQL: {db_info[2].split(',')[0]}")
    
    # Testa migrations
    print("\n3. Verificando status das migrations...")
    from django.core.management import call_command
    from io import StringIO
    
    out = StringIO()
    call_command('showmigrations', '--plan', stdout=out)
    migrations_output = out.getvalue()
    
    if migrations_output:
        print("‚úÖ Django consegue acessar as migrations")
        # Mostra apenas as primeiras linhas
        lines = migrations_output.split('\n')[:10]
        for line in lines:
            print(f"   {line}")
        if len(migrations_output.split('\n')) > 10:
            print("   ...")
    
    # Verifica tabelas existentes
    print("\n4. Verificando tabelas no banco...")
    with connection.cursor() as cursor:
        cursor.execute("""
            SELECT table_name 
            FROM information_schema.tables 
            WHERE table_schema = 'public' 
            ORDER BY table_name;
        """)
        tables = cursor.fetchall()
        
        if tables:
            print(f"‚úÖ Encontradas {len(tables)} tabelas:")
            for table in tables[:10]:  # Mostra apenas as 10 primeiras
                print(f"   - {table[0]}")
            if len(tables) > 10:
                print(f"   ... e mais {len(tables) - 10} tabelas")
        else:
            print("‚ö†Ô∏è  Nenhuma tabela encontrada (banco vazio)")
    
    print("\n" + "=" * 50)
    print("‚úÖ TODOS OS TESTES PASSARAM!")
    print("=" * 50)
    
except Exception as e:
    print("\n" + "=" * 50)
    print("‚ùå ERRO NA CONEX√ÉO!")
    print("=" * 50)
    print(f"\nTipo do erro: {type(e).__name__}")
    print(f"Mensagem: {str(e)}")
    
    # Informa√ß√µes de debug
    print("\nüîç Informa√ß√µes de Debug:")
    
    # Vari√°veis de ambiente relacionadas ao banco
    db_vars = ['DATABASE_URL', 'PGDATABASE', 'PGHOST', 'PGPORT', 'PGUSER']
    print("\nVari√°veis de ambiente do banco:")
    for var in db_vars:
        value = os.environ.get(var, 'N√ÉO DEFINIDA')
        if value != 'N√ÉO DEFINIDA' and var in ['DATABASE_URL', 'PGUSER']:
            # Oculta informa√ß√µes sens√≠veis
            value = value[:20] + '...' if len(value) > 20 else value
        print(f"   {var}: {value}")
    
    # Settings do Django
    try:
        from django.conf import settings
        print("\nConfigura√ß√£o DATABASES do Django:")
        if hasattr(settings, 'DATABASES'):
            default_db = settings.DATABASES.get('default', {})
            print(f"   ENGINE: {default_db.get('ENGINE', 'N√ÉO DEFINIDO')}")
            print(f"   NAME: {default_db.get('NAME', 'N√ÉO DEFINIDO')}")
            print(f"   HOST: {default_db.get('HOST', 'N√ÉO DEFINIDO')}")
            print(f"   PORT: {default_db.get('PORT', 'N√ÉO DEFINIDO')}")
            print(f"   USER: {default_db.get('USER', 'N√ÉO DEFINIDO')[:10]}..." if default_db.get('USER') else "   USER: N√ÉO DEFINIDO")
    except:
        print("   ‚ùå N√£o foi poss√≠vel acessar as configura√ß√µes do Django")
    
    print("\nüí° Dicas para resolver:")
    print("   1. Verifique se DATABASE_URL est√° configurada no Railway")
    print("   2. Certifique-se que o PostgreSQL est√° provisionado")
    print("   3. Verifique se dj_database_url est√° instalado")
    print("   4. Confirme que settings.py est√° usando dj_database_url.parse()")
    
    sys.exit(1)